{"/home/travis/build/npmtest/node-npmtest-node-red-firebase/test.js":"/* istanbul instrument in package npmtest_node_red_firebase */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-red-firebase/lib.npmtest_node_red_firebase.js":"/* istanbul instrument in package npmtest_node_red_firebase */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_red_firebase = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_red_firebase = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-red-firebase/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-red-firebase && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_red_firebase */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_red_firebase\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_red_firebase.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_red_firebase.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_red_firebase.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_red_firebase.__dirname + '/lib.npmtest_node_red_firebase.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-red-firebase/node_modules/node-red-firebase/firebase_query.js":"module.exports = function (RED) {\n    'use strict';\n\n    function sendMessageFromSnapshot(msg, snapshot) {\n        msg.href = snapshot.ref().toString();\n        msg.payload = snapshot.val();\n        this.send(msg);\n    }\n\n    function FirebaseQuery(n) {\n        var Firebase = require('firebase'),\n            firebaseStatus = require('./utility/status');\n\n        RED.nodes.createNode(this, n);\n\n        this.child = n.child;\n        this.credentials = RED.nodes.getNode(n.firebaselogin).credentials;\n        this.firebasepath = n.firebasepath;\n\n        // Status\n        firebaseStatus.connecting(this);\n\n        // Check credentials\n        if (!this.credentials.appid) {\n            firebaseStatus.error(this, 'Check credentials! (Query)');\n        } else {\n            this.firebaseurl = 'https://' + this.credentials.appid + '.firebaseio.com/' + this.firebasepath;\n            this.firebase = new Firebase(this.firebaseurl);\n\n            // Status\n            firebaseStatus.checkStatus(this);\n\n            // Add listener\n            this.on('input', function (msg) {\n                var childpath = (this.child) ? String(msg[this.child]) : ''; // get path from msg or default to\n                childpath = (childpath.indexOf('/') == 0) ? childpath : '/' + childpath; // make sure the path starts with\n                this.firebase.child(childpath).once('value', sendMessageFromSnapshot.bind(this, msg));\n            });\n        }\n    }\n\n    RED.nodes.registerType('firebase query', FirebaseQuery);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-firebase/node_modules/node-red-firebase/firebase_login.js":"module.exports = function (RED) {\n    'use strict';\n\n    /**\n     * FirebaseLoginNode\n     *\n     * The Server Definition - this opens (and closes) the connection\n     *\n     * @param n\n     * @constructor\n     */\n    function FirebaseLoginNode(n) {\n\n        var Firebase,\n            node = this,\n            firebaseStatus = require('./utility/status');\n\n        RED.nodes.createNode(this, n);\n\n        this.appid = n.appid;\n        this.type = n.type;\n        this.uid = n.uid;\n        this.email = n.email;\n        this.password = n.password;\n        this.secret = n.secret;\n\n        Firebase = require('firebase');\n\n        // Retrieve the config node\n        this.server = RED.nodes.getNode(n.server);\n\n        if (this.credentials\n            && this.credentials.appid\n            && this.credentials.type) {\n\n            firebaseStatus.connecting(this);\n\n            this.url = 'https://' + this.credentials.appid + '.firebaseio.com';\n            global.refFirebase = new Firebase(this.url);\n            switch (this.credentials.type) {\n                case 'custom':\n                    LoginTypeCustom(node, firebaseStatus);\n                    break;\n                case 'email':\n                    LoginTypeEmail(node);\n                    break;\n            }\n        }\n        else {\n            this.error('Check your credentials! (Login node)');\n        }\n\n    }\n\n    /**\n     * Fire base login via user and secret\n     * @constructor\n     * @return void\n     */\n    function LoginTypeCustom(node) {\n        var FirebaseLoginCustom,\n            firebaseLoginCustom;\n\n        FirebaseLoginCustom = require('firebase-login-custom');\n\n        node.log('Firebase login custom');\n\n        if (node.credentials.secret &&\n            node.credentials.uid) {\n            node.data = {\n                uid: node.credentials.uid,\n                secret: node.credentials.secret\n            };\n\n            firebaseLoginCustom = new FirebaseLoginCustom(node.refFirebase,\n                {\n                    uid: node.data.uid\n                },\n                {\n                    secret: node.data.secret\n                },\n                function (error) {\n                    if (error !== null) {\n                        node.error('Login error with custom login');\n                        node.error(error);\n                    } else {\n                        node.log('Login successful');\n                    }\n                }\n            );\n        } else {\n            node.error('Check your secret!');\n        }\n    }\n\n    /**\n     * Fire base login via password and email\n     * @constructor\n     * @return void\n     */\n    function LoginTypeEmail(node) {\n        var FirebaseLoginEmail,\n            firebaseLoginEmail;\n\n        FirebaseLoginEmail = require('firebase-login-email');\n\n        node.log('Firebase login email');\n\n        if (node.credentials.email &&\n            node.credentials.password) {\n\n            node.data = {\n                email: node.credentials.email,\n                password: node.credentials.password\n            };\n\n            firebaseLoginEmail = new FirebaseLoginEmail(\n                global.refFirebase,\n                node.data,\n                function (error) {\n                    if (error !== null) {\n                        node.error('Login error with custom login');\n                        node.error(error);\n                    } else {\n                        node.log('Login successful');\n                    }\n                }\n            );\n        } else {\n            node.error('Check your email credentials!');\n        }\n    }\n\n    RED.nodes.registerType('firebase login', FirebaseLoginNode, {\n        credentials: {\n            appid: {type: 'text'},\n            type: {type: 'text'},\n            uid: {type: 'text'},\n            email: {type: 'text'},\n            password: {type: 'password'},\n            secret: {type: 'text'}\n        }\n    });\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-firebase/node_modules/node-red-firebase/firebase_modify.js":"module.exports = function (RED) {\n    'use strict';\n\n    function FirebaseModify(n) {\n        var Firebase = require('firebase'),\n            firebaseStatus = require('./utility/status');\n\n        RED.nodes.createNode(this, n);\n\n        this.child = n.child;\n        this.credentials = RED.nodes.getNode(n.firebaselogin).credentials;\n        this.firebasepath = n.firebasepath;\n        this.method = n.method;\n\n        // Status\n        firebaseStatus.connecting(this);\n\n        // Retrieve the config node\n        if (!this.credentials.appid) {\n            firebaseStatus.error(this, 'Check credentials!');\n            this.error('You need to setup Firebase credentials!');\n        } else {\n            this.firebaseurl = 'https://' + this.credentials.appid + '.firebaseio.com/' + this.firebasepath;\n            this.firebase = new Firebase(this.firebaseurl);\n\n            // Status\n            firebaseStatus.checkStatus(this);\n\n            switch (this.method) {\n                case 'set':\n                case 'update':\n                case 'push':\n                    // To prevent code repetition, call the Firebase API function based on method directly\n                    this.on('input', function (msg) {\n                        // get path from msg or default to /\n                        var childpath = (this.child) ? msg[this.child] : '';\n                        // make sure the path starts with /\n                        childpath = (childpath.indexOf('/') == 0) ? childpath : '/' + childpath;\n\n                        this.firebase.child(childpath)[this.method](msg.payload);\n                    });\n                    break;\n                case 'remove':\n                    // Remove method expects first argument to be a function, so we call it differently\n                    this.on('input', function (msg) {\n                        // get path from msg or default to /\n                        var childpath = (this.child) ? msg[this.child] : '';\n                        // make sure the path starts with /\n                        childpath = (childpath.indexOf('/') == 0) ? childpath : '/' + childpath;\n\n                        this.firebase.child(childpath)[this.method]();\n                    });\n                    break;\n            }\n        }\n    }\n\n    RED.nodes.registerType('firebase modify', FirebaseModify);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-firebase/node_modules/node-red-firebase/firebase_watch.js":"module.exports = function(RED) {\n    'use strict';\n\n    function sendMessageFromSnapshot(snapshot) {\n        var msg = {};\n        msg.href = snapshot.ref().toString();\n        msg.payload = snapshot.val();\n        this.send(msg);\n    }\n\n    function FirebaseWatch(n) {\n        var Firebase = require('firebase'),\n            firebaseStatus = require('./utility/status');\n\n        RED.nodes.createNode(this,n);\n\n        this.credentials = RED.nodes.getNode(n.firebaselogin).credentials;\n        this.onValue = sendMessageFromSnapshot.bind(this);\n        this.firebasepath = n.firebasepath;\n\n        // Status\n        firebaseStatus.connecting(this);\n\n        // Check credentials\n        if (!this.credentials.appid) {\n            firebaseStatus.error(this,'Check credentials!');\n            this.error('You need to setup Firebase credentials!');\n        } else {\n            this.firebaseurl = 'https://' + this.credentials.appid + '.firebaseio.com/' + this.firebasepath;\n            this.firebase = new Firebase(this.firebaseurl);\n\n            // Status\n            firebaseStatus.checkStatus(this);\n\n            this.firebase.on('value', this.onValue);\n            this.on('close', function() {\n                // We need to unbind our callback, or we'll get duplicate messages when we redeploy\n                this.firebase.off('value', this.onValue);\n            });\n        }\n    }\n    RED.nodes.registerType('firebase watch', FirebaseWatch);\n};\n","/home/travis/build/npmtest/node-npmtest-node-red-firebase/node_modules/node-red-firebase/utility/status.js":"/**\n * Status\n *\n * @type {{offline: Function, connecting: Function, connected: Function, error: Function, addListener: Function}}\n */\nmodule.exports = {\n\n    /**\n     * Status offline\n     *\n     * @param node\n     */\n    offline: function (node) {\n        node.status({\n                fill: 'gray',\n                shape: 'ring',\n                text: 'disconnected'\n            }\n        );\n    },\n\n    /**\n     * Status connecting\n     *\n     * @param node\n     */\n    connecting: function (node) {\n        node.status({\n                fill: 'grey',\n                shape: 'ring',\n                text: 'connecting'\n            }\n        );\n    },\n\n    /**\n     * Status connected\n     *\n     * @param node\n     */\n    connected: function (node) {\n        node.status({\n                fill: 'green',\n                shape: 'dot',\n                text: 'connected'\n            }\n        );\n    },\n\n    /**\n     * Status error\n     *\n     * @param node\n     * @param msg\n     */\n    error: function (node, msg) {\n        node.status({\n                fill: 'red',\n                shape: 'ring',\n                text: msg || 'connection failed'\n            }\n        );\n    },\n\n    /**\n     * AddEventListener\n     *\n     * @param node\n     */\n    addListener: function (node) {\n\n        var self = this;\n\n        global.refFirebase.onAuth(function(authData) {\n            if (authData) {\n                self.connected(node);\n            } else {\n                self.error(node);\n            }\n        });\n\n        global.refFirebase.offAuth(function(authData) {\n            if (authData) {\n                self.connected(node);\n            } else {\n                self.offline(node);\n            }\n        });\n    },\n\n    /**\n     * AddEventListener\n     *\n     * @param node\n     */\n    checkStatus: function (node) {\n\n        var authData,\n            self = this;\n\n        node.firebase.onAuth(function(authData) {\n            if (authData) {\n                self.connected(node);\n            } else {\n                self.error(node);\n            }\n        });\n\n        node.firebase.offAuth(function(authData) {\n            if (authData) {\n                self.connected(node);\n            } else {\n                self.offline(node);\n            }\n        });\n\n        authData = node.firebase.getAuth();\n        if (authData) {\n            self.connected(node);\n        } else {\n            self.offline(node);\n        }\n    }\n};\n"}